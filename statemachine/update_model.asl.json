{
    "Comment": "The workflow for creating and updating the Forecast Prediction Model",
    "StartAt": "InitUpdateModelFlow",
    "States": {
        "InitUpdateModelFlow": {
            "Type": "Task",
            "Resource": "${InitUpdateModelFlowArn}",
            "Parameters": {
                "StateMachineName": "update-model"
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Next": "CreateNewDataset"
        },
        "CreateNewDataset": {
            "Type": "Task",
            "Resource": "${CreateDatasetArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 15,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "CreateNewDatasetGroup"
        },
        "CreateNewDatasetGroup": {
            "Type": "Task",
            "Resource": "${CreateDatasetGroupArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "CreateNewDatasetImportJob"
        },
        "CreateNewDatasetImportJob": {
            "Type": "Task",
            "Resource": "${CreateDatasetImportJobArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 15,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "CreateNewPredictor"
        },
        "CreateNewPredictor": {
            "Type": "Task",
            "Resource": "${CreatePredictorArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 25,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "DeleteOutdatedPredictors"
        },
        "DeleteOutdatedPredictors": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedPredictorsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "DeleteOutdatedDatasetImportJobs"
        },
        "DeleteOutdatedDatasetImportJobs": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedDatasetImportJobsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "DeleteOutdatedDatasets"
        },
        "DeleteOutdatedDatasets": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedDatasetsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Next": "DeleteOutdatedDatasetGroups"
        },
        "DeleteOutdatedDatasetGroups": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedDatasetGroupsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "NotifyFailure"
                }
            ],
            "Next": "Done"
        },
        "NotifyFailure": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "Parameters": {
                "Subject": "Amazon Forecast Pipeline - UpdateModelFlow Failed",
                "Message.$": "$",
                "TopicArn": "${NotifyFailureSNSTopicArn}"
            },
            "Next": "Failure"
        },
        "Failure": {
            "Type": "Fail"
        },
        "Done": {
            "Type": "Succeed"
        }
    }
}