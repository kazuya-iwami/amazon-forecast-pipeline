{
    "Comment": "The workflow for creating and updating the Forecast Prediction Model",
    "StartAt": "CreateNewDataset",
    "States": {
        "CreateNewDataset": {
            "Type": "Task",
            "Resource": "${CreateDatasetArn}",
            "Parameters": {
                "StateMachineName": "update-forecast",
                "DatasetGroup": {
                    "Domain": "CUSTOM"
                },
                "Predictor": {
                    "ForecastHorizon": 2,
                    "FeaturizationConfig": {
                        "ForecastFrequency": "H"
                    },
                    "PerformAutoML": true
                },
                "Forecast": {
                    "ForecastTypes": [
                        "0.50"
                    ]
                },
                "DatasetTimestampFormat": "yyyy-MM-dd hh:mm:ss",
                "DatasetImportJobs": [
                    {
                        "DatasetType": "TARGET_TIME_SERIES",
                        "Filename": "target_time_series.csv"
                    },
                    {
                        "DatasetType": "RELATED_TIME_SERIES",
                        "Filename": "related_time_series.csv"
                    },
                    {
                        "DatasetType": "ITEM_METADATA",
                        "Filename": "metadata.csv"
                    }
                ],
                "Datasets": [
                    {
                        "Domain": "CUSTOM",
                        "DatasetType": "TARGET_TIME_SERIES",
                        "DataFrequency": "H",
                        "Schema": {
                            "Attributes": [
                                {
                                    "AttributeName": "timestamp",
                                    "AttributeType": "timestamp"
                                },
                                {
                                    "AttributeName": "target_value",
                                    "AttributeType": "float"
                                },
                                {
                                    "AttributeName": "item_id",
                                    "AttributeType": "string"
                                }
                            ]
                        }
                    },
                    {
                        "Domain": "CUSTOM",
                        "DatasetType": "RELATED_TIME_SERIES",
                        "DataFrequency": "H",
                        "Schema": {
                            "Attributes": [
                                {
                                    "AttributeName": "timestamp",
                                    "AttributeType": "timestamp"
                                },
                                {
                                    "AttributeName": "price",
                                    "AttributeType": "float"
                                },
                                {
                                    "AttributeName": "item_id",
                                    "AttributeType": "string"
                                }
                            ]
                        }
                    },
                    {
                        "Domain": "CUSTOM",
                        "DatasetType": "ITEM_METADATA",
                        "DataFrequency": "H",
                        "Schema": {
                            "Attributes": [
                                {
                                    "AttributeName": "item_id",
                                    "AttributeType": "string"
                                },
                                {
                                    "AttributeName": "location",
                                    "AttributeType": "string"
                                }
                            ]
                        }
                    }
                ]
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 15,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "CreateNewDatasetGroup"
        },
        "CreateNewDatasetGroup": {
            "Type": "Task",
            "Resource": "${CreateDatasetGroupArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "CreateNewDatasetImportJob"
        },
        "CreateNewDatasetImportJob": {
            "Type": "Task",
            "Resource": "${CreateDatasetImportJobArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 15,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "CreateNewForecast"
        },
        "CreateNewForecast": {
            "Type": "Task",
            "Resource": "${CreateForecastArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 20,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "CreateNewForecastExportJob"
        },
        "CreateNewForecastExportJob": {
            "Type": "Task",
            "Resource": "${CreateForecastExportJobArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 20,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "DeleteOutdatedForecastExportJobs"
        },
        "DeleteOutdatedForecastExportJobs": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedForecastExportJobsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "DeleteOutdatedForecasts"
        },
        "DeleteOutdatedForecasts": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedForecastsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "Done"
        },
        "Failure": {
            "Type": "Fail"
        },
        "Done": {
            "Type": "Succeed"
        }
    }
}