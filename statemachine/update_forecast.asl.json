{
    "Comment": "The workflow for creating and updating the Forecast Prediction Model",
    "StartAt": "InitUpdateForecastFlow",
    "States": {
        "InitUpdateForecastFlow": {
            "Type": "Task",
            "Resource": "${InitUpdateForecastFlowArn}",
            "Parameters": {
                "StateMachineName": "update-forecast"
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Next": "CreateNewDatasetImportJob"
        },
        "CreateNewDatasetImportJob": {
            "Type": "Task",
            "Resource": "${CreateDatasetImportJobArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 15,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "CreateNewForecast"
        },
        "CreateNewForecast": {
            "Type": "Task",
            "Resource": "${CreateForecastArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 20,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "CreateNewForecastExportJob"
        },
        "CreateNewForecastExportJob": {
            "Type": "Task",
            "Resource": "${CreateForecastExportJobArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 20,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "DeleteOutdatedForecastExportJobs"
        },
        "DeleteOutdatedForecastExportJobs": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedForecastExportJobsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "DeleteOutdatedForecasts"
        },
        "DeleteOutdatedForecasts": {
            "Type": "Task",
            "Resource": "${DeleteOutdatedForecastsArn}",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.serviceError",
                    "Next": "Failure"
                }
            ],
            "Retry": [
                {
                    "ErrorEquals": [
                        "ResourcePending"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 2
                }
            ],
            "Next": "Done"
        },
        "Failure": {
            "Type": "Fail"
        },
        "Done": {
            "Type": "Succeed"
        }
    }
}