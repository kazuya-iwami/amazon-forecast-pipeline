AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "ML Pipeline of Amazon Forecast"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 1024
    Runtime: python3.8
    Handler: app.lambda_handler
    Timeout: 180
    Layers:
      - !Ref SharedLayer
      - !GetAtt AwsLambdaPowertoolsPythonLayer.Outputs.LayerVersionArn
    Environment:
      Variables:
        # https://awslabs.github.io/aws-lambda-powertools-python/core/logger/
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName

# Define some constants which can be used across entire cloudformation stack
Mappings:
  Constants:
    S3:
      SrcS3Folder: "source"
      TgtS3Folder: "target"

Parameters:
  # please specify your own bucket name which contains training data.
  S3BucketName:
    Type: String

Resources:
  # Shared Infrastructures

  # --------------- IAM Role ---------------
  # associated with lambda functions to allow them to call Forecast API and access S3 bucket
  S3GetRoleForForecast:
    Type: AWS::IAM::Role
    Properties:
      Description: "S3 Get Role for Amazon Forecast"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "forecast.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: "GetDataFromSrcS3Folder"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "s3:GetObject"
                Effect: "Allow"
                Resource:
                  !Join [
                    "",
                    [
                      "arn:",
                      !Ref AWS::Partition,
                      ":s3:::",
                      !Ref S3BucketName,
                      "/",
                      !FindInMap [Constants, S3, SrcS3Folder],
                      "/*",
                    ],
                  ]

  S3UpdateRoleForForecast:
    Type: AWS::IAM::Role
    Properties:
      Description: "S3 Update Role for Amazon Forecast"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "forecast.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: "UpdateDataOfTgtS3Folder"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # For Forecast use, when it publishes new predictions, it also deletes the existing predictions
              - Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Effect: "Allow"
                Resource:
                  !Join [
                    "",
                    [
                      "arn:",
                      !Ref AWS::Partition,
                      ":s3:::",
                      !Ref S3BucketName,
                      "/",
                      !FindInMap [Constants, S3, TgtS3Folder],
                      "/*",
                    ],
                  ]

  ForecastPipelineRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      Description: "ForecastPipeline Role for Lambda"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonForecastFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
      Policies:
        - PolicyName: "PassRequiredRolesToForecastService"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iam:GetRole"
                  - "iam:PassRole"
                Resource:
                  - !GetAtt S3UpdateRoleForForecast.Arn
                  - !GetAtt S3UpdateRoleForForecast.Arn
        - PolicyName: "GetDataFromSrcS3Folder"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource:
                  !Join [
                    "",
                    [
                      "arn:",
                      !Ref AWS::Partition,
                      ":s3:::",
                      !Ref S3BucketName,
                      "/",
                      !FindInMap [Constants, S3, SrcS3Folder],
                      "/*",
                    ],
                  ]

  # --------------- Lambda Function ---------------
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: forecast_sample_layer
      ContentUri: functions/shared/
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete

  # See https://awslabs.github.io/aws-lambda-powertools-python/#lambda-layer
  AwsLambdaPowertoolsPythonLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-west-1:057560766410:applications/aws-lambda-powertools-python-layer
        SemanticVersion: 1.4.0

  CreateDataset:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Create an Amazon Forecast dataset. The information about the dataset that you provide helps AWS Forecast understand how to consume the data for model training."
      CodeUri: functions/create_dataset/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName

  CreateDatasetGroup:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Create an Amazon Forecast dataset group which can contain one or multiple dataset(s)."
      CodeUri: functions/create_dataset_group/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  CreateDatasetImportJob:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Uploads your training data to an Amazon Forecast dataset."
      Environment:
        Variables:
          FORECAST_IMPORT_JOB_ROLE_ARN: !GetAtt S3GetRoleForForecast.Arn
          S3_BUCKET_NAME: !Ref S3BucketName
          S3_SRC_FOLDER: !FindInMap [Constants, S3, SrcS3Folder]
      CodeUri: functions/create_dataset_import_job/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  CreateForecast:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Creates a forecast for each item in the target_time_series dataset."
      CodeUri: functions/create_foreacast/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  CreateForecastExportJob:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Export a result of forecast into S3 bucket"
      CodeUri: functions/create_foreacast_export_job/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn
      Environment:
        Variables:
          FORECAST_EXPORT_JOB_ROLE_ARN: !GetAtt S3UpdateRoleForForecast.Arn
          S3_BUCKET_NAME: !Ref S3BucketName
          TGT_S3_FOLDER: !FindInMap [Constants, S3, TgtS3Folder]

  CreatePredictor:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Creates an Amazon Forecast predictor(ML model)."
      CodeUri: functions/create_predictor/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedDatasetImportJobs:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated datasetImportJobs."
      CodeUri: functions/delete_outdated_dataset_import_jobs/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedForecastExportJobs:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated forecastExportJobs."
      CodeUri: functions/delete_outdated_foreast_export_jobs/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedForecasts:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated forecasts."
      CodeUri: functions/delete_outdated_forecasts/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedPredictors:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated predictors."
      CodeUri: functions/delete_outdated_predictors/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedDatasets:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated datasets."
      CodeUri: functions/delete_outdated_datasets/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedDatasetGroups:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated dataset groups."
      CodeUri: functions/delete_outdated_dataset_groups/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  # --------------- StateMachine (Step Fucntion + IAM Role + CloudWatch Events ---------------
  # -- Update Model --

  # Step Functions for orchestrating multiple Lambda functions to generate the Forecast predictor(ML model)
  UpdateModelStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Join ["-", [!Ref AWS::StackName, "UpdateModelStateMachine"]]
      Role: !GetAtt UpdateModelStateMachineIAMRole.Arn
      DefinitionUri: statemachine/update_model.asl.json
      DefinitionSubstitutions:
        CreateDatasetArn: !GetAtt CreateDataset.Arn
        CreateDatasetGroupArn: !GetAtt CreateDatasetGroup.Arn
        CreateDatasetImportJobArn: !GetAtt CreateDatasetImportJob.Arn
        CreatePredictorArn: !GetAtt CreatePredictor.Arn
        DeleteOutdatedPredictorsArn: !GetAtt DeleteOutdatedPredictors.Arn
        DeleteOutdatedDatasetImportJobsArn: !GetAtt DeleteOutdatedDatasetImportJobs.Arn
        DeleteOutdatedDatasetsArn: !GetAtt DeleteOutdatedDatasets.Arn
        DeleteOutdatedDatasetGroupsArn: !GetAtt DeleteOutdatedDatasetGroups.Arn

  # IAM Role used by UpdateModelStateMachine to trigger Lambda functions
  UpdateModelStateMachineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM role for UpdateModelStateMachine"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - Fn::Sub: "states.${AWS::Region}.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CallingLambdaFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CreateDataset.Arn
                  - !GetAtt CreateDatasetGroup.Arn
                  - !GetAtt CreateDatasetImportJob.Arn
                  - !GetAtt CreatePredictor.Arn
                  - !GetAtt CreateForecast.Arn
                  - !GetAtt CreateForecastExportJob.Arn
                  - !GetAtt DeleteOutdatedForecastExportJobs.Arn
                  - !GetAtt DeleteOutdatedForecasts.Arn
                  - !GetAtt DeleteOutdatedPredictors.Arn
                  - !GetAtt DeleteOutdatedDatasetImportJobs.Arn

  # Cloudwatch Event Rule to trigger UpdateModelStateMachine periodically(low frequency)
  UpdateModelStateMachineScheduledEventRule:
    Type: AWS::Events::Rule
    DependsOn: UpdateModelStateMachine
    Properties:
      Description: "The trigger for workflow to generate or update the ML model."
      ScheduleExpression: "rate(8 hours)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateModelStateMachine.Arn
          Id: "UpdateModelStateMachineTarget"
          RoleArn: !GetAtt UpdateModelStateMachineScheduledEventRuleIAMRole.Arn

  ## IAM Role used by UpdateModelStateMachineScheduledEventRule to trigger Step Functions
  UpdateModelStateMachineScheduledEventRuleIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM role for ScheduledEventRule of UpdateModelStateMachine"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "TriggeringUpdateModelStateMachineExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource:
                  - !GetAtt UpdateModelStateMachine.Arn

  # -- Update Forecast --

  # Step Functions for orchestrating multiple Lambda functions to generate the Forecast predictor(ML model)
  UpdateForecastStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Join ["-", [!Ref AWS::StackName, "UpdateForecastStateMachine"]]
      Role: !GetAtt UpdateForecastStateMachineIAMRole.Arn
      DefinitionUri: statemachine/update_forecast.asl.json
      DefinitionSubstitutions:
        CreateDatasetArn: !GetAtt CreateDataset.Arn
        CreateDatasetGroupArn: !GetAtt CreateDatasetGroup.Arn
        CreateDatasetImportJobArn: !GetAtt CreateDatasetImportJob.Arn
        CreatePredictorArn: !GetAtt CreatePredictor.Arn
        CreateForecastArn: !GetAtt CreateForecast.Arn
        CreateForecastExportJobArn: !GetAtt CreateForecastExportJob.Arn
        DeleteOutdatedForecastExportJobsArn: !GetAtt DeleteOutdatedForecastExportJobs.Arn
        DeleteOutdatedForecastsArn: !GetAtt DeleteOutdatedForecasts.Arn
        DeleteOutdatedPredictorsArn: !GetAtt DeleteOutdatedPredictors.Arn
        DeleteOutdatedDatasetImportJobsArn: !GetAtt DeleteOutdatedDatasetImportJobs.Arn

  # IAM Role used by UpdateForecastStateMachine to trigger Lambda functions
  UpdateForecastStateMachineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM role for UpdateForecastStateMachine"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - Fn::Sub: "states.${AWS::Region}.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CallingLambdaFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CreateDataset.Arn
                  - !GetAtt CreateDatasetGroup.Arn
                  - !GetAtt CreateDatasetImportJob.Arn
                  - !GetAtt CreatePredictor.Arn
                  - !GetAtt CreateForecast.Arn
                  - !GetAtt CreateForecastExportJob.Arn
                  - !GetAtt DeleteOutdatedForecastExportJobs.Arn
                  - !GetAtt DeleteOutdatedForecasts.Arn
                  - !GetAtt DeleteOutdatedPredictors.Arn
                  - !GetAtt DeleteOutdatedDatasetImportJobs.Arn

  # Cloudwatch Event Rule to trigger UpdateForecastStateMachine periodically(low frequency)
  UpdateForecastStateMachineScheduledEventRule:
    Type: AWS::Events::Rule
    DependsOn: UpdateForecastStateMachine
    Properties:
      Description: "The trigger for workflow to generate or update the forecast."
      ScheduleExpression: "rate(2 hours)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateForecastStateMachine.Arn
          Id: "UpdateForecastStateMachineTarget"
          RoleArn: !GetAtt UpdateForecastStateMachineScheduledEventRuleIAMRole.Arn

  ## IAM Role used by UpdateForecastStateMachineScheduledEventRule to trigger Step Functions
  UpdateForecastStateMachineScheduledEventRuleIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM role for ScheduledEventRule of UpdateForecastStateMachine"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "TriggeringUpdateForecastStateMachineExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource:
                  - !GetAtt UpdateForecastStateMachine.Arn
