AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "ML Pipeline of Amazon Forecast"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 1024
    Runtime: python3.8
    Handler: app.lambda_handler
    Timeout: 180
    Layers:
      - !Ref SharedLayer
      - !GetAtt AwsLambdaPowertoolsPythonLayer.Outputs.LayerVersionArn
    Environment:
      Variables:
        # https://awslabs.github.io/aws-lambda-powertools-python/core/logger/
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName

# Define some constants which can be used across entire cloudformation stack
Mappings:
  Constants:
    S3:
      SrcS3Folder: "source"
      TgtS3Folder: "target"
    DatasetName:
      TargetTimeSeriesName: "target_time_series.csv"
      RelatedTimeSeriesName: "related_time_series.csv"
      MetadataName: "metadata.csv"

Parameters:
  # Since s3 bucket name has to been unique across all accounts all regions, so please specify your own bucket name
  S3BucketName:
    Type: String

Resources:
  # Shared Infrastructures
  # --------------- S3 Bucket ---------------
  # holding training data and prediction result
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  # --------------- IAM Role ---------------
  # associated with lambda functions to allow them to call Forecast API and access S3 bucket
  S3GetRoleForForecast:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "S3GetRoleForForecast"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "forecast.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: "GetDataFromSrcS3Folder"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "s3:GetObject"
                Effect: "Allow"
                Resource:
                  Fn::Join:
                    - ""
                    - - !GetAtt S3Bucket.Arn
                      - "/"
                      - !FindInMap [Constants, S3, SrcS3Folder]
                      - "/*"

  S3UpdateRoleForForecast:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "S3UpdateRoleForForecast"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "forecast.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: "UpdateDataOfTgtS3Folder"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # For Forecast use, when it publishes new predictions, it also deletes the existing predictions
              - Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Effect: "Allow"
                Resource:
                  !Join [
                    "",
                    [
                      !GetAtt S3Bucket.Arn,
                      "/",
                      !FindInMap [Constants, S3, TgtS3Folder],
                      "/*",
                    ],
                  ]

  ForecastPipelineRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonForecastFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
      Policies:
        - PolicyName: "PassRequiredRolesToForecastService"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iam:GetRole"
                  - "iam:PassRole"
                Resource:
                  - !GetAtt S3UpdateRoleForForecast.Arn
                  - !GetAtt S3UpdateRoleForForecast.Arn
        - PolicyName: "GetDataFromSrcS3Folder"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource:
                  !Join [
                    "",
                    [
                      "arn:",
                      !Ref AWS::Partition,
                      ":s3:::",
                      !Ref S3BucketName,
                      "/",
                      !FindInMap [Constants, S3, SrcS3Folder],
                      "/*",
                    ],
                  ]

  # --------------- Lambda Function ---------------
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: forecast_sample_layer
      ContentUri: functions/shared/
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete

  # See https://awslabs.github.io/aws-lambda-powertools-python/#lambda-layer
  AwsLambdaPowertoolsPythonLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-west-1:057560766410:applications/aws-lambda-powertools-python-layer
        SemanticVersion: 1.4.0

  CreateDataset:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Create an Amazon Forecast dataset. The information about the dataset that you provide helps AWS Forecast understand how to consume the data for model training."
      CodeUri: functions/create_dataset/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  CreateDatasetGroup:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Create an Amazon Forecast dataset group which can contain one or multiple dataset(s)."
      CodeUri: functions/create_dataset_group/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  CreateDatasetImportJob:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Uploads your training data to an Amazon Forecast dataset."
      Environment:
        Variables:
          FORECAST_IMPORT_JOB_ROLE_ARN: !GetAtt S3GetRoleForForecast.Arn
          S3_BUCKET_NAME: !Ref S3BucketName
          S3_SRC_FOLDER: !FindInMap [Constants, S3, SrcS3Folder]
          TARGET_TIME_SERIES_FILE_NAME:
            !FindInMap [Constants, DatasetName, TargetTimeSeriesName]
          RELATED_TIME_SERIES_FILE_NAME:
            !FindInMap [Constants, DatasetName, RelatedTimeSeriesName]
          METADATA_FILE_NAME: !FindInMap [Constants, DatasetName, MetadataName]
      CodeUri: functions/create_dataset_import_job/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  CreateForecast:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Creates a forecast for each item in the target_time_series dataset."
      CodeUri: functions/create_foreacast/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  CreateForecastExportJob:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Export a result of forecast into S3 bucket"
      CodeUri: functions/create_foreacast_export_job/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn
      Environment:
        Variables:
          FORECAST_EXPORT_JOB_ROLE_ARN: !GetAtt S3UpdateRoleForForecast.Arn
          S3_BUCKET_NAME: !Ref S3BucketName
          TGT_S3_FOLDER: !FindInMap [Constants, S3, TgtS3Folder]

  CreatePredictor:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Creates an Amazon Forecast predictor(ML model)."
      CodeUri: functions/create_predictor/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedDatasetImportJobs:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated datasetImportJobs."
      CodeUri: functions/delete_outdated_dataset_import_jobs/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedForecastExportJobs:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated forecastExportJobs."
      CodeUri: functions/delete_outdated_foreast_export_jobs/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedForecasts:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated forecasts."
      CodeUri: functions/delete_outdated_forecasts/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  DeleteOutdatedPredictors:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Delete outdated predictors."
      CodeUri: functions/delete_outdated_predictors/
      Role: !GetAtt ForecastPipelineRoleForLambda.Arn

  # --------------- StateMachine (Step Fucntion + IAM Role + CloudWatch Events ---------------
  # Step Functions for orchestrating multiple Lambda functions to generate the Forecast predictor(ML model)
  UpdateModelStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Role: !GetAtt UpdateModelStateMachineIAMRole.Arn
      DefinitionUri: statemachine/update_model.asl.json
      DefinitionSubstitutions:
        CreateDatasetArn: !GetAtt CreateDataset.Arn
        CreateDatasetGroupArn: !GetAtt CreateDatasetGroup.Arn
        CreateDatasetImportJobArn: !GetAtt CreateDatasetImportJob.Arn
        CreatePredictorArn: !GetAtt CreatePredictor.Arn
        CreateForecastArn: !GetAtt CreateForecast.Arn
        CreateForecastExportJobArn: !GetAtt CreateForecastExportJob.Arn
        DeleteOutdatedForecastExportJobsArn: !GetAtt DeleteOutdatedForecastExportJobs.Arn
        DeleteOutdatedForecastsArn: !GetAtt DeleteOutdatedForecasts.Arn
        DeleteOutdatedPredictorsArn: !GetAtt DeleteOutdatedPredictors.Arn
        DeleteOutdatedDatasetImportJobsArn: !GetAtt DeleteOutdatedDatasetImportJobs.Arn

  # IAM Role used by UpdateModelStateMachine to trigger Lambda functions
  UpdateModelStateMachineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "UpdateModelStateMachineIAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - Fn::Sub: "states.${AWS::Region}.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CallingLambdaFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CreateDataset.Arn
                  - !GetAtt CreateDatasetGroup.Arn
                  - !GetAtt CreateDatasetImportJob.Arn
                  - !GetAtt CreatePredictor.Arn
                  - !GetAtt CreateForecast.Arn
                  - !GetAtt DeleteOutdatedForecastExportJobs.Arn
                  - !GetAtt DeleteOutdatedForecasts.Arn
                  - !GetAtt DeleteOutdatedPredictors.Arn
                  - !GetAtt DeleteOutdatedDatasetImportJobs.Arn

  # Cloudwatch Event Rule to trigger UpdateModelStateMachine periodically(low frequency)
  UpdateModelStateMachineScheduledEventRule:
    Type: AWS::Events::Rule
    DependsOn: UpdateModelStateMachine
    Properties:
      Description: "The trigger for workflow to generate or update the ML model."
      ScheduleExpression: "rate(30 days)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateModelStateMachine.Arn
          Id: "UpdateModelStateMachineTarget"
          RoleArn: !GetAtt UpdateModelStateMachineScheduledEventRuleIAMRole.Arn

  ## IAM Role used by UpdateModelStateMachineScheduledEventRule to trigger Step Functions
  UpdateModelStateMachineScheduledEventRuleIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "UpdateModelStateMachineScheduledEventRuleIAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "TriggeringUpdateModelStateMachineExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource:
                  - !GetAtt UpdateModelStateMachine.Arn
  ## StateMachine(AWS Step functions): For orchestrating multiple Lambda functions to generate the prediction result
  # ForecastExportCronStateMachine:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties:
  #     StateMachineName:
  #       Fn::FindInMap:
  #         [Constants, StateMachine, ForecastExportCronStateMachineName]
  #     RoleArn:
  #       Fn::GetAtt: [ForecastExportCronStateMachineIAMRole, Arn]
  #     DefinitionString:
  #       Fn::Sub:
  #         - |-
  #           {
  #             "Comment": "The workflow for generating new forecast based on latest predictor",
  #             "StartAt": "GenerateNewForecastResourcesIdentifiersCron",
  #             "States": {
  #               "GenerateNewForecastResourcesIdentifiersCron": {
  #                 "Type": "Task",
  #                 "Resource": "${GenerateForecastResourcesIdentifiersCronArn}",
  #                 "Catch": [{
  #                   "ErrorEquals": ["States.TaskFailed"],
  #                   "Next": "Failure"
  #                 }],
  #                 "Next": "DeleteOutdatedForecastExportJobs"
  #               },
  #               "DeleteOutdatedForecastExportJobs": {
  #                "Type": "Task",
  #                "Resource": "${DeleteOutdatedForecastExportJobsArn}",
  #                "Catch": [{
  #                  "ErrorEquals": ["States.TaskFailed"],
  #                  "Next": "Failure"
  #                }],
  #                "Retry": [{
  #                  "ErrorEquals": ["States.TaskFailed"],
  #                  "IntervalSeconds": 20,
  #                  "MaxAttempts": 20,
  #                  "BackoffRate": 1.5
  #                }],
  #                "Next": "DeleteOutdatedForecasts"
  #               },
  #               "DeleteOutdatedForecasts": {
  #                "Type": "Task",
  #                "Resource": "${DeleteOutdatedForecastsArn}",
  #                "Catch": [{
  #                  "ErrorEquals": ["States.TaskFailed"],
  #                  "Next": "Failure"
  #                }],
  #                "Retry": [{
  #                  "ErrorEquals": ["States.TaskFailed"],
  #                  "IntervalSeconds": 20,
  #                  "MaxAttempts": 20,
  #                  "BackoffRate": 1.5
  #                }],
  #                "Next": "CreateNewDatasetImportJob"
  #               },
  #               "CreateNewDatasetImportJob": {
  #                 "Type": "Task",
  #                 "Resource": "${CreateDatasetImportJobArn}",
  #                 "Catch": [{
  #                   "ErrorEquals": ["States.TaskFailed"],
  #                   "Next": "Failure"
  #                 }],
  #                 "Retry": [{
  #                   "ErrorEquals": ["States.TaskFailed"],
  #                   "IntervalSeconds": 20,
  #                   "MaxAttempts": 20,
  #                   "BackoffRate": 1.5
  #                 }],
  #                 "Next": "CreateNewForecast"
  #               },
  #               "CreateNewForecast": {
  #                 "Type": "Task",
  #                 "Resource": "${CreateForecastArn}",
  #                 "Catch": [{
  #                   "ErrorEquals": ["States.TaskFailed"],
  #                   "Next": "Failure"
  #                 }],
  #                 "Retry": [{
  #                   "ErrorEquals": ["States.TaskFailed"],
  #                   "IntervalSeconds": 20,
  #                   "MaxAttempts": 20,
  #                   "BackoffRate": 1.5
  #                 }],
  #                 "Next": "CreateNewForecastExportJob"
  #               },
  #               "CreateNewForecastExportJob": {
  #                 "Type": "Task",
  #                 "Resource": "${CreateForecastExportJobArn}",
  #                 "Catch": [{
  #                   "ErrorEquals": ["States.TaskFailed"],
  #                   "Next": "Failure"
  #                 }],
  #                 "Retry": [{
  #                   "ErrorEquals": ["States.TaskFailed"],
  #                   "IntervalSeconds": 20,
  #                   "MaxAttempts": 20,
  #                   "BackoffRate": 1.5
  #                 }],
  #                 "Next": "Done"
  #               },
  #               "Failure": {
  #                 "Type": "Fail"
  #               },
  #               "Done": {
  #                 "Type": "Succeed"
  #               }
  #             }
  #           }
  #         - GenerateForecastResourcesIdentifiersCronArn:
  #             Fn::GetAtt: [GenerateForecastResourcesIdentifiersCron, Arn]
  #           DeleteOutdatedForecastExportJobsArn:
  #             Fn::GetAtt: [DeleteOutdatedForecastExportJobs, Arn]
  #           DeleteOutdatedForecastsArn:
  #             Fn::GetAtt: [DeleteOutdatedForecasts, Arn]
  #           CreateDatasetImportJobArn:
  #             Fn::GetAtt: [CreateDatasetImportJob, Arn]
  #           CreateForecastArn:
  #             Fn::GetAtt: [CreateForecast, Arn]
  #           CreateForecastExportJobArn:
  #             Fn::GetAtt: [CreateForecastExportJob, Arn]
  # ## IAM Role used by ForecastExportCronStateMachine to trigger Lambda functions
  # ForecastExportCronStateMachineIAMRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Action:
  #             - sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - Fn::Sub: "states.${AWS::Region}.amazonaws.com"
  #     Path: "/"
  #     Policies:
  #       - PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Action:
  #                 - lambda:InvokeFunction
  #               Effect: Allow
  #               Resource:
  #                 - Fn::GetAtt:
  #                     - GenerateForecastResourcesIdentifiersCron
  #                     - Arn
  #                 - Fn::GetAtt:
  #                     - DeleteOutdatedForecastExportJobs
  #                     - Arn
  #                 - Fn::GetAtt:
  #                     - DeleteOutdatedForecasts
  #                     - Arn
  #                 - Fn::GetAtt:
  #                     - CreateDatasetImportJob
  #                     - Arn
  #                 - Fn::GetAtt:
  #                     - CreateForecast
  #                     - Arn
  #                 - Fn::GetAtt:
  #                     - CreateForecastExportJob
  #                     - Arn
  #         PolicyName: "CallingLambdaFunction"
  # ## Cloudwatch Event Rule to trigger ForecastExportCronStateMachine periodically(high frequency)
  # ForecastExportCronStateMachineScheduledEventRule:
  #   Type: AWS::Events::Rule
  #   DependsOn: ForecastExportCronStateMachine
  #   Properties:
  #     Description: "The trigger for workflow to generate new forecast based latest predictor"
  #     ScheduleExpression: "rate(2 hours)"
  #     State: ENABLED
  #     Targets:
  #       - Arn:
  #           Fn::Join:
  #             - ":"
  #             - - "arn"
  #               - Ref: AWS::Partition
  #               - "states"
  #               - Ref: AWS::Region
  #               - Ref: AWS::AccountId
  #               - "stateMachine"
  #               - Fn::FindInMap:
  #                   [
  #                     Constants,
  #                     StateMachine,
  #                     ForecastExportCronStateMachineName,
  #                   ]
  #         Id: "ForecastExportCronStateMachineTarget"
  #         RoleArn:
  #           Fn::GetAtt:
  #             - ForecastExportCronStateMachineScheduledEventRuleIAMRole
  #             - Arn
  # ## IAM Role used by ForecastExportCronStateMachineScheduledEventRule to trigger Step Functions
  # ForecastExportCronStateMachineScheduledEventRuleIAMRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Action:
  #             - sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service: "events.amazonaws.com"
  #     Path: "/"
  #     Policies:
  #       - PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Action:
  #                 - states:StartExecution
  #               Effect: Allow
  #               Resource:
  #                 - Fn::Join:
  #                     - ":"
  #                     - - "arn"
  #                       - Ref: AWS::Partition
  #                       - "states"
  #                       - Ref: AWS::Region
  #                       - Ref: AWS::AccountId
  #                       - "stateMachine"
  #                       - Fn::FindInMap:
  #                           [
  #                             Constants,
  #                             StateMachine,
  #                             ForecastExportCronStateMachineName,
  #                           ]
  #         PolicyName: "TriggeringForecastExportCronStateMachineExecution"
